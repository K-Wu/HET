///
/// SHAPE INFORMATION
///
// TODO: fullfil this

///
/// DAG
///
// TODO: variable name rule varname(_src|_dst)(_delta)(_term[0-9])(_tmp[0-9])(_transposed)
DAG{
// TODO: add pass to reduce data movement caused by copy, concatenation and split
(EDGEWISE, "output_tmp1_delta") = Copy(input = (DSTNODE, "output_delta"));
(EDGEWISE, "attn_delta") = EdgeInnerProduct(left = (EDGEWISE, "output_tmp1_delta"), right = (EDGEWISE, "msg"));
(EDGEWISE, "msg_delta) = EdgeScalarVectorMul(scalar = (EDGEWISE, "attn"), vector = (NODEWISE, "output_delta"));

(EDGEWISE, "raw_attn_delta_term1") = ScalarDivide(left = (EDGEWISE, "attn_delta"), right = (DSTNODE, "attn_sum"));
// TODO: implement a pass that reduce the scope of this following statement from edge-wise to dstnode-wise
(EDGEWISE, "attn_sum_delta_tmp1") = ScalarMultiply(left = (DSTNODE, "attn_sum"), right = (EDGEWISE, "attn_sum"));
(EDGEWISE, "attn_sum_delta_tmp2") = ScalarDivide(left = (EDGEWISE, "raw_attn_delta"), right = (EDGEWISE, "attn_sum_delta_tmp1"));
(EDGEWISE, "attn_sum_delta_tmp3") = Negative(input = (EDGEWISE, "attn_sum_delta_tmp2"));
(DSTNODE, "attn_sum_delta") = NodeSumAccumulation(input=(EDGEWISE, "attn_sum_delta_tmp3"));

(EDGEWISE, "raw_attn_delta") = ScalarAdd(left = (EDGEWISE, "raw_attn_delta_term1"), right = (DSTNODE, "attn_sum_delta"));

(EDGEWISE, "raw_attn_tmp2_delta") = InverseExponential(input = (EDGEWISE, "raw_attn_delta"));
(EDGEWISE, "raw_attn_tmp1_delta") = InverseLeakyRelu(input = (EDGEWISE, "raw_attn_tmp2_delta"));
// TODO: note that EDGETYPE weight delta may need careful handling during code generation: they use increment operators in the frontend and here we explicitly express that via a new operator EdgeTypeSumAccumulation.
(EDGEWISE, "attn_vec_delta_term") = EdgeScalarVectorMul(scalar = (EDGEWISE, "raw_attn_tmp1_delta"), vector = (EDGEWISE, "zizj"));
(attn_vec_delta, EDGETYPE) = EdgeTypeSumAccumulation(input = (EDGEWISE, "attn_vec_delta_term"));
// TODO: support naming of split results
// TODO: support dimension calculation of the split and concatenated results
(DSTNODE, "output_split_1_in_2"), (DSTNODE, "output_split_2_in_2") = Split(input = (DSTNODE, "output"));
(attn_vec_delta_split_1_in_2, EDGETYPE), (attn_vec_delta_split_2_in_2, EDGETYPE) = Split(input = (attn_vec_delta, EDGETYPE));
(EDGEWISE, "zi_delta") = EdgeInnerProduct(left = (DSTNODE, "output_split_1_in_2"), right = (attn_vec_delta_split_1_in_2, EDGETYPE));
(EDGEWISE, "zj_delta") = EdgeInnerProduct(left = (DSTNODE, "output_split_2_in_2"), right = (attn_vec_delta_split_2_in_2, EDGETYPE));
(W_transposed, EDGETYPE) = Transpose(input = (W, EDGETYPE));
(SRCNODE, "feature_delta") = EdgeDense(input = (EDGEWISE, "zi_delta"), weight = (W_transposed, EDGETYPE));
(DSTNODE, "feature_delta") = EdgeDense(input = (EDGEWISE, "zh_delta"), weight = (W_transposed, EDGETYPE));
(EDGEWISE, "W_delta_term1_tmp1") = EdgeOuterProduct(left = (SRCNODE, "feature"), right = (EDGEWISE, "zi_delta"));
(W_delta_term1, EDGETYPE) = EdgeTypeSumAccumulation(input =(EDGEWISE, "W_delta_term1_tmp1"));
(EDGEWISE, "W_delta_term1_tmp2") = EdgeOuterProduct(left = (DSTNODE, "feature"), right = (EDGEWISE, "zj_delta"));
(W_delta_term2, EDGETYPE) = EdgeTypeSumAccumulation(input =(EDGEWISE, "W_delta_term1_tmp2"));
(W_delta, EDGETYPE) = MatrixAdd(left = (W_delta_term1, EDGETYPE), right = (W_delta_term2, EDGETYPE));
}
